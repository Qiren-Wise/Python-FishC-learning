总结：这节课我们了解了self、__init__、公有和私有
对象的方法都会有一个self参数，如果把类比作为做房子的图纸，由类实例化的对象才是真正可以住的房子
	但是我们可以凭借一张图纸做出成千上万座类似的房子，而self就相当于门牌号，用了self，我们才可以轻松的找到自己的房子
	举个例子：
		class House():
			def door(self,num,floor):
				self.num = num
				self.floor = floor
			def owner(self):
				print('我居住在%d层%d号房间' % (self.floor,self.num))
	我们实例化对象：
		h1 = House()
		h2 = House()
		h1.door(519,5)
		h2.door(305,3)
		
		h1.owner()	#这里的括号内是有self的，只不过我们隐藏了，我们调用此方法的时候，就把h1传入的这个self中
		h2.owner()		# 然后python就知道我们是想操作哪个方法了
		
初识魔法方法——__init__、公有和私有
	- python天生拥有一些魔法方法，是可以给类增加一些魔力的特殊方法，如果对象实现了这些方法中的某一个，那么这些方法就会在特殊情况下被python调用
		这里先简单介绍以下__init__这个魔法方法，其他的后面介绍
		通常把__init__方法称为构造方法，魔力体现在可以实例化一个对象，这个方法会在函数创建时自动调用
		如：
			class Way():
				def __init__(self,name):
					self.name = name
				def like(self):
					print("我叫%s，我喜欢干饭" % self.name)
		那么我们实例化对象的时候就可以：
		w = Way('张三')		# way里面的参数会直接传入有__init__的参数中
		w.like()						# 我们在需要使用时，会自动调用
		
公有和私有
一般面向对象的编程语言都有公有和私有的数据类型，c++和java是用关键字参数来声明，我们python却不是，python默认对象的属性和方法都是公开的，可以直接通过'.'来访问
	如果我们想实现私有变量，需要在变量或者函数名前加上'__'双下划线，那么函数就变为私有了
	如：
		class Person():
			__name = '张三'
			def getName(self):
				return self.__name
	实例化对象:
		p = Person()
		p.name	# X错，我们直接访问是访问不到了，这样会报错，如果我们要访问，我们要从内部进行访问，如上面函数定义的
		p.getName()		# 这样就可以访问到我们的私有变量啦，这里会返回getName()函数的返回值
		# 如果我们想换种方法也可以，其实python的私有变量并不是真正的私有，算是伪私有，可以是有'_类名__变量名'进行访问，如：
		p._Person()__name		# 这样也可以访问私有变量__name的值
		